<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Docker常用命令]]></title>
    <url>%2Fdocker%2FDocker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[本文介绍常用的Docker命令和一个最简单的Dockerfile示例. 常用命令1234567891011121314151617181920212223docker ps # 显示所有running docker container, 可以看到容器的名称和iddocker ps -a # 显示所有docker container，包含已停止运行的docker stop &#123;container_name/id&#125; # 停止某个running 的容器docker rm &#123;container_name/id&#125; # 删除一个停止的容器docker start &#123;container_name/id&#125; # 重新启动某个stop的容器docker attach &#123;container_name/id&#125; # attach 到一个已运行的容器中进程的stdin, 如果从这个stdin 中exit, 会导致容器的停止docker run -d -p 10022:22 herong/centos7-ssh:latest /usr/sbin/sshd -D # detach 模式运行容器，并将宿主机端口10022映射到容器端口22docker port 4966d35fe0a3 #查看容器的端口映射情况, 4966d35fe0a3目标容器的iddocker images # 显示所有本地的imagedocker rim &#123;image_name/id&#125; # 删除一个image, 如果有容器引用了该镜像, 则需先删除容器docker run docker/whalesay cowsay boo-boo # run一个image: docker/whalesaydocker run -it docker/whalesay # 交互式方式 run 一个容器docker exec -it &#123;container_name/id&#125; /bin/bash # 在已启动的容器中启动一个交互式命令行, 这个命令行进程与容器中已运行的进程无相互影响, 不会像attach方式因为退出导致整个容器退出docker login # 输入dockerhub 用户名密码登陆dockerhubdocker search python # 在dockerhub 上搜索镜像docker pull python # 从dockerhub pull 一个镜像docker run yourusername/docker-whale #从docker hub下载image并rundocker commit -a wliked -m "comments" &#123;container_name/id&#125; wliked/vacation_system:v1.0 # 从正在running的容器commit 一个镜像docker tag vacation_system wliked/vacation_system:v1.0 #更改镜像名称并将其加入一个repo (wliked) , 这个repo一般是dockerhub用户名,或私有镜像仓库中的用户名docker push wliked/vacation_system:v1.0 # 打上repo名后,可以向dockerhub push 镜像 简单Dockerfile示例 123456mkdir dockerbuildcd dockerbuildtouch Dockerfile # 新建文件并输入如下Doerkfile内容: FROM docker/whalesay:latest RUN apt-get -y update &amp;&amp; apt-get install -y fortunes #可以有多个RUN命令 # RUN 命令会基于已有的镜像层run一个容器起来, 在里面执行命令, 然后docker commit一个镜像, 每个RUN命令都对应这样一个动作; 所以镜像是一层层build出来的 CMD /usr/games/fortune -a | cowsay 根据Dockerfile build一个镜像:123docker build -t docker-whale . # build 一个叫 docker-whale 的image, 注意后面的 . 号, 表示 Dockerfile的路径docker run docker-whale # 运行自己刚build 出来的imagedocker tag 7d9495d03763 maryatdocker/docker-whale:latest # 为image打tag]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python manage.py makemigrations 提示No changes detected的解决方法]]></title>
    <url>%2Fpython%2Fpython-manage-py-makemigrations-%E6%8F%90%E7%A4%BANo-changes-detected%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[python manage.py makemigrations 提示No changes detected的解决方案一般是按如下方法进行操作: 可能是setttings.py 中的INSTALLED_APPS 中没有添加相应的app. 先要保证这里配置了相应的app. 可能是app 下面的migrations文件夹被删除了, 解决方法如下: 123python manage.py makemigrations --empty yourappname # 生成一个migrations文件夹和一个空的initial.pypython manage.py makemigrations # 生成原先的model对应的migration filepython manage.py migrate --fake # 将原先的model进行一个假执行到数据库(告诉django数据库这些老的数据已经在数据库中了). 这样django会认为之前的model都已经在数据库中了. 如果要继续修改model并生成对应sql, 可以参考如下的步骤: 更改你的app下面的model 123python manage.py makemigrations # 生成新更改的model对应的migration file如003_auto_2018-12-30.pypython manage.py sqlmigrate yourappname 003 # 生成新的migration file对应的sql(注意:这种方式会把model中设置的default值去掉. 生成sql语句后,要手动把这些sql语句中drop default的语句删除)]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Funcategorized%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Test Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
